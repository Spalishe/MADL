MADL File Format v1 Specification
Info: file format is created for easier handling of animated rigs. This includes games/programs that can't handle animated meshes, but can generate it on runtime / create from table.

// Exactly 68 bytes
struct madl_st {
	int 			id;									// Model format id, must be "MADL" (0x4D,0x41,0x44,0x4C)
	int				version;							// Format version, currently is '1' (0x01,0x00,0x00,0x00)
	int				checksum;							// Must be same in MPHY, MTEX and in MANI to properly load!
	char			name[32];							// The internal name of the model, padding with null bytes.
														// Typically "my_model.madl" will have an internal name of "my_model"
														
	int				bone_count;							// Number of data sections.
	int				bone_offset;						// Offset to first mbone_st.
	
	int				static_mesh_count;
	int				static_mesh_offset; 				// See mstmesh_st.
	
	int				dynamic_mesh_count;
	int				dynamic_mesh_offset;				// See mdynmesh_st.
}

// Exactly 68 bytes
struct mbone_st {
	int				index;								// Bone index.
	char			name[32];							// Bone name, padding with null bytes.
	int				parent;								// Bone parent index, -1 for no parent, means its a base bone
	Vector			bone_position;						// Bone position relative to parent bone.
	Quaternion			bone_angle;							// Bone rotation relative to parent bone.
} 

struct mstmesh_st {
	int				struct_size							// This struct size, without this variable
	int				index;								// Static mesh index.
	char			name[32];							// Static mesh name, padding with null bytes.
	byte			parented;							// Is parented to the bone, 0 if not, anything else is true.
	int				boneIndex;							// Parented bone index, 0 if mesh not parented.
	Vector			position;							// Static mesh position relative to origin, (0,0,0) if parented.
	Euler			angle;								// Static mesh rotation relative to origin, (0,0,0) if parented.
	int				vertices_count;						// Static mesh vertices count.
	m_stvert_st		vertices[vertices_count];			// Vertices data.
	byte			texture								// Texture index, -1 if no those
}

// Exactly 32 bytes
struct m_stvert_st {
	Vector			vert_position;						// Vertex Position.
	Vector			vert_normal;						// Vertex Normal.
	Vector2D		vert_textcord;						// Vertex Texture Coordinates.
}

struct mdynvert_st {
	int				struct_size							// This struct size, without this variable
	byte			numbones;							// Count of bones.
	float			weight[numbones];					// Vertex weights per each bone.
	int				bone[numbones];						// Bones indexes.
	Vector			vert_position;						// Vertex Position.
	Vector			vert_normal;						// Vertex Normal.
	Vector2D		vert_textcord;						// Vertex Texture Coordinates.
}

struct mdynmesh_st {
	int				struct_size							// This struct size, without this variable
	int				index;								// Dynamic mesh index.
	char			name[32];							// Dynamic mesh name, padding with null bytes.
	int				vertices_count;						// Dynamic mesh vertices count.
	mdynvert_st		vertices[vertices_count];			// Vertices data.
	byte			texture								// Texture index, -1 if no those
}
